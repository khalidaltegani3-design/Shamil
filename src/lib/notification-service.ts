// Notification Service for User Communications
import { collection, addDoc, serverTimestamp, query, where, getDocs, orderBy } from 'firebase/firestore';
import { db } from './firebase';

export interface NotificationMessage {
  id?: string;
  userId?: string;
  userEmail: string;
  title: string;
  message: string;
  type: 'login_issue' | 'password_reset' | 'system_update' | 'general' | 'urgent';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  status: 'pending' | 'sent' | 'delivered' | 'failed';
  createdAt?: any;
  sentAt?: any;
  deliveryMethod: 'email' | 'sms' | 'push' | 'in_app';
  metadata?: {
    loginAttempts?: number;
    lastLogin?: any;
    userRole?: string;
    department?: string;
  };
}

export class NotificationService {
  
  // Send notification to specific user
  static async sendUserNotification(notification: Omit<NotificationMessage, 'id' | 'createdAt' | 'status'>) {
    try {
      const notificationData = {
        ...notification,
        status: 'pending' as const,
        createdAt: serverTimestamp(),
        sentAt: null
      };

      const docRef = await addDoc(collection(db, 'notifications'), notificationData);
      
      // Log the notification
      console.log(`üìß Notification queued for ${notification.userEmail}: ${notification.title}`);
      
      return { id: docRef.id, ...notificationData };
    } catch (error) {
      console.error('‚ùå Failed to send notification:', error);
      throw error;
    }
  }

  // Send bulk notifications to multiple users
  static async sendBulkNotifications(notifications: Omit<NotificationMessage, 'id' | 'createdAt' | 'status'>[]) {
    try {
      const promises = notifications.map(notification => 
        this.sendUserNotification(notification)
      );
      
      const results = await Promise.allSettled(promises);
      
      const successful = results.filter(result => result.status === 'fulfilled').length;
      const failed = results.filter(result => result.status === 'rejected').length;
      
      console.log(`üìä Bulk notification results: ${successful} sent, ${failed} failed`);
      
      return { successful, failed, results };
    } catch (error) {
      console.error('‚ùå Failed to send bulk notifications:', error);
      throw error;
    }
  }

  // Get notifications for a specific user
  static async getUserNotifications(userEmail: string) {
    try {
      const q = query(
        collection(db, 'notifications'),
        where('userEmail', '==', userEmail),
        orderBy('createdAt', 'desc')
      );
      
      const querySnapshot = await getDocs(q);
      const notifications = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as NotificationMessage[];
      
      return notifications;
    } catch (error) {
      console.error('‚ùå Failed to get user notifications:', error);
      throw error;
    }
  }

  // Get all pending notifications
  static async getPendingNotifications() {
    try {
      const q = query(
        collection(db, 'notifications'),
        where('status', '==', 'pending'),
        orderBy('createdAt', 'asc')
      );
      
      const querySnapshot = await getDocs(q);
      const notifications = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as NotificationMessage[];
      
      return notifications;
    } catch (error) {
      console.error('‚ùå Failed to get pending notifications:', error);
      throw error;
    }
  }

  // Predefined notification templates
  static getNotificationTemplates() {
    return {
      login_issue: {
        title: 'ŸÖÿ¥ŸÉŸÑÿ© ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ - ÿ®ŸÑÿØŸäÿ© ÿßŸÑÿ±ŸäÿßŸÜ',
        message: `ŸÖÿ±ÿ≠ÿ®ÿßŸãÿå

ÿ™ŸÖ ÿ±ÿµÿØ ŸÖÿ¥ŸÉŸÑÿ© ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑŸÉ ŸÑŸÑŸÜÿ∏ÿßŸÖ. Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ¨ÿ±ÿ®ÿ© ÿßŸÑÿ≠ŸÑŸàŸÑ ÿßŸÑÿ™ÿßŸÑŸäÿ©:

1. ÿßÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ "ŸÜÿ≥Ÿäÿ™ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±ÿü"
2. ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ®ÿ±ŸäÿØŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸÑŸÑÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©
3. ÿßŸÖÿ≥ÿ≠ ÿ∞ÿßŸÉÿ±ÿ© ÿßŸÑÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑŸÖÿ§ŸÇÿ™ ŸÑŸÑŸÖÿ™ÿµŸÅÿ≠
4. ÿ¨ÿ±ÿ® ŸÖÿ™ÿµŸÅÿ≠ ÿ¢ÿÆÿ± ÿ£Ÿà Ÿàÿ∂ÿπ ÿßŸÑÿ™ÿµŸÅÿ≠ ÿßŸÑÿÆŸÅŸä

ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿ©ÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπ ŸÖÿØŸäÿ± ÿßŸÑŸÜÿ∏ÿßŸÖ.

ŸÖÿπ ÿ£ÿ∑Ÿäÿ® ÿßŸÑÿ™ÿ≠Ÿäÿßÿ™ÿå
ŸÅÿ±ŸäŸÇ ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸä - ÿ®ŸÑÿØŸäÿ© ÿßŸÑÿ±ŸäÿßŸÜ`,
        type: 'login_issue' as const,
        priority: 'high' as const
      },
      
      password_reset: {
        title: 'ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± - ÿ®ŸÑÿØŸäÿ© ÿßŸÑÿ±ŸäÿßŸÜ',
        message: `ŸÖÿ±ÿ≠ÿ®ÿßŸãÿå

ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿßÿ®ÿ∑ ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ•ŸÑŸâ ÿ®ÿ±ŸäÿØŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä.

Ÿäÿ±ÿ¨Ÿâ:
1. ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿµŸÜÿØŸàŸÇ ÿßŸÑŸàÿßÿ±ÿØ
2. ŸÅÿ≠ÿµ ŸÖÿ¨ŸÑÿØ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑŸÖÿ≤ÿπÿ¨ÿ© (Spam)
3. ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑÿ±ÿßÿ®ÿ∑ ÿßŸÑŸÖÿ±ŸÅŸÇ
4. ÿ•ÿØÿÆÿßŸÑ ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿ¨ÿØŸäÿØÿ©

ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ÿ≥ÿ™ŸÑŸÖ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿÆŸÑÿßŸÑ 10 ÿØŸÇÿßÿ¶ŸÇÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÜÿß.

ŸÖÿπ ÿ£ÿ∑Ÿäÿ® ÿßŸÑÿ™ÿ≠Ÿäÿßÿ™ÿå
ŸÅÿ±ŸäŸÇ ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸä - ÿ®ŸÑÿØŸäÿ© ÿßŸÑÿ±ŸäÿßŸÜ`,
        type: 'password_reset' as const,
        priority: 'urgent' as const
      },
      
      system_update: {
        title: 'ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÜÿ∏ÿßŸÖ - ÿ®ŸÑÿØŸäÿ© ÿßŸÑÿ±ŸäÿßŸÜ',
        message: `ŸÖÿ±ÿ≠ÿ®ÿßŸãÿå

ŸÜŸàÿØ ÿ•ÿπŸÑÿßŸÖŸÉŸÖ ÿ®ÿ£ŸÜŸá ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ®ŸÑÿßÿ∫ÿßÿ™ ÿßŸÑÿØÿßÿÆŸÑŸäÿ© ÿ®ŸÜÿ¨ÿßÿ≠.

ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ÿßŸÑÿ¨ÿØŸäÿØÿ© ÿ™ÿ¥ŸÖŸÑ:
- ÿ™ÿ≠ÿ≥ŸäŸÜÿßÿ™ ŸÅŸä Ÿàÿßÿ¨Ÿáÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
- ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸäÿ≤ÿßÿ™ ÿ¨ÿØŸäÿØÿ©
- ÿ•ÿµŸÑÿßÿ≠ ÿ®ÿπÿ∂ ÿßŸÑŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑÿ™ŸÇŸÜŸäÿ©

Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ŸÑÿ™ÿ¨ÿ±ÿ®ÿ© ÿßŸÑŸÖŸäÿ≤ÿßÿ™ ÿßŸÑÿ¨ÿØŸäÿØÿ©.

ŸÖÿπ ÿ£ÿ∑Ÿäÿ® ÿßŸÑÿ™ÿ≠Ÿäÿßÿ™ÿå
ŸÅÿ±ŸäŸÇ ÿßŸÑÿ™ÿ∑ŸàŸäÿ± - ÿ®ŸÑÿØŸäÿ© ÿßŸÑÿ±ŸäÿßŸÜ`,
        type: 'system_update' as const,
        priority: 'medium' as const
      },
      
      urgent_maintenance: {
        title: 'ÿµŸäÿßŸÜÿ© ÿπÿßÿ¨ŸÑÿ© ŸÑŸÑŸÜÿ∏ÿßŸÖ - ÿ®ŸÑÿØŸäÿ© ÿßŸÑÿ±ŸäÿßŸÜ',
        message: `ÿ™ŸÜÿ®ŸäŸá ÿπÿßÿ¨ŸÑ:

ÿ≥Ÿäÿ™ŸÖ ÿ•ÿ¨ÿ±ÿßÿ° ÿµŸäÿßŸÜÿ© ÿπÿßÿ¨ŸÑÿ© ÿπŸÑŸâ ÿßŸÑŸÜÿ∏ÿßŸÖ ŸÅŸä ÿ£ŸÇÿ±ÿ® ŸàŸÇÿ™ ŸÖŸÖŸÉŸÜ.

Ÿäÿ±ÿ¨Ÿâ:
1. ÿ≠ŸÅÿ∏ ÿ£Ÿä ÿπŸÖŸÑ ÿ∫Ÿäÿ± ŸÖÿ≠ŸÅŸàÿ∏
2. ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨ ŸÖŸÜ ÿßŸÑŸÜÿ∏ÿßŸÖ
3. ÿπÿØŸÖ ŸÖÿ≠ÿßŸàŸÑÿ© ÿßŸÑÿØÿÆŸàŸÑ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿµŸäÿßŸÜÿ©

ÿ≥Ÿäÿ™ŸÖ ÿ•ÿ¥ÿπÿßÿ±ŸÉŸÖ ÿπŸÜÿØ ÿßŸÜÿ™Ÿáÿßÿ° ÿßŸÑÿµŸäÿßŸÜÿ©.

ŸÖÿπ ÿ£ÿ∑Ÿäÿ® ÿßŸÑÿ™ÿ≠Ÿäÿßÿ™ÿå
ŸÅÿ±ŸäŸÇ ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸä - ÿ®ŸÑÿØŸäÿ© ÿßŸÑÿ±ŸäÿßŸÜ`,
        type: 'urgent' as const,
        priority: 'urgent' as const
      }
    };
  }

  // Send login issue notification
  static async sendLoginIssueNotification(userEmail: string, attemptsLeft: number = 1) {
    const template = this.getNotificationTemplates().login_issue;
    
    return await this.sendUserNotification({
      userEmail,
      title: template.title,
      message: template.message,
      type: template.type,
      priority: template.priority,
      deliveryMethod: 'email',
      metadata: {
        loginAttempts: attemptsLeft,
        lastLogin: new Date().toISOString()
      }
    });
  }

  // Send password reset notification
  static async sendPasswordResetNotification(userEmail: string) {
    const template = this.getNotificationTemplates().password_reset;
    
    return await this.sendUserNotification({
      userEmail,
      title: template.title,
      message: template.message,
      type: template.type,
      priority: template.priority,
      deliveryMethod: 'email'
    });
  }

  // Send system update notification to all users
  static async sendSystemUpdateToAllUsers() {
    const template = this.getNotificationTemplates().system_update;
    
    // Get all users from Firestore
    const usersQuery = query(collection(db, 'users'));
    const usersSnapshot = await getDocs(usersQuery);
    
    const notifications = usersSnapshot.docs.map(doc => ({
      userEmail: doc.data().email,
      title: template.title,
      message: template.message,
      type: template.type,
      priority: template.priority,
      deliveryMethod: 'email' as const,
      metadata: {
        userRole: doc.data().role,
        department: doc.data().department
      }
    }));
    
    return await this.sendBulkNotifications(notifications);
  }
}
